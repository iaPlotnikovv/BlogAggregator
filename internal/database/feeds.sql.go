// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feeds.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, user_id, name, url)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, name, url, user_id, created_at, updated_at
`

type CreateFeedParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Name   string
	Url    string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Url,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFeed = `-- name: ListFeed :many
SELECT users.name, feeds.name, feeds.url
FROM feeds
INNER JOIN users
ON feeds.user_id = users.id
`

type ListFeedRow struct {
	Name   string
	Name_2 string
	Url    string
}

func (q *Queries) ListFeed(ctx context.Context) ([]ListFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedRow
	for rows.Next() {
		var i ListFeedRow
		if err := rows.Scan(&i.Name, &i.Name_2, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
